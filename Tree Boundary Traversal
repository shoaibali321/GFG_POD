class Solution {
    ArrayList<Integer> boundaryTraversal(Node node) {
        // code here
        ArrayList<Integer> solv= new ArrayList();
        if(node.left!=null || node.right!=null){
            solv.add(node.data);
        }
        lftnode(node.left,solv);
        leafnodes(node,solv);
        rightRevNodes(node.right,solv);
        return solv;
    }
    void lftnode(Node node, ArrayList<Integer> solv){
        if(node==null){
            return;
        }
        if(node.left!=null){
            solv.add(node.data);
            lftnode(node.left,solv);
        }
        else if(node.right!=null){
            solv.add(node.data);
            lftnode(node.right,solv);
            
        }
    }
    void leafnodes(Node node, ArrayList<Integer> solv){
        if(node == null)
            return;
        leafnodes(node.left, solv);
        if(node.left==null && node.right == null){
             solv.add(node.data);
        }
         leafnodes(node.right, solv);
    }
    void rightRevNodes(Node node, ArrayList<Integer> solv){
        if(node == null)
            return;
        if(node.right!=null){
            rightRevNodes(node.right, solv);
            solv.add(node.data);
        } else if(node.left!=null){
            rightRevNodes(node.left, solv);
            solv.add(node.data);
        }
    }
}
